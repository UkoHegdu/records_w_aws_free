name: CI/CD Pipeline

on:
  push:
    branches: [main, test]
    paths-ignore:
      - ".github/workflows/**"
      - "docs/**"
      - "*.md"
      - "CHANGELOG.md"
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deployment (useful after pipeline fixes)"
        required: false
        default: false
        type: boolean
  pull_request:
    branches: [main, test]
    paths-ignore:
      - ".github/workflows/**"
      - "docs/**"
      - "*.md"
      - "CHANGELOG.md"

permissions:
  contents: read
  security-events: write
  actions: read

env:
  NODE_VERSION: "20"
  AWS_REGION: "eu-north-1"

jobs:
  # Job 1: Code Quality & Security Scanning
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for SonarCloud

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # Frontend dependencies and linting
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint

      # Lambda dependencies and linting
      - name: Install Lambda dependencies
        working-directory: ./terraform/lambda
        run: npm ci

      # SonarCloud Analysis (Main branch only)
      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5
        if: github.ref == 'refs/heads/main'
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=UkoHegdu_records_w_aws_free
            -Dsonar.organization=recordsw
            -Dsonar.sources=terraform/lambda,frontend/src
            -Dsonar.exclusions=**/node_modules/**,**/dist/**,**/coverage/**,**/*.test.js,**/*.spec.js
            -Dsonar.lang.patterns.js=**/*.js,**/*.jsx
            -Dsonar.lang.patterns.ts=**/*.ts,**/*.tsx

      # GitHub CodeQL Analysis (All branches)
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: true

  # Job 2: Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lambda dependencies
        working-directory: ./terraform/lambda
        run: npm ci

      - name: Run Lambda unit tests
        working-directory: ./terraform/lambda
        run: npm run test:unit -- --coverage --coverageReporters=lcov

      - name: Upload Lambda coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./terraform/lambda/coverage/lcov.info
          flags: lambda
          name: lambda-coverage

      # Frontend tests
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test -- --coverage

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Job 3: Build & Package
  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lambda dependencies
        working-directory: ./terraform/lambda
        run: npm ci --production

      - name: Package Lambda functions
        working-directory: ./terraform
        run: |
          mkdir -p lambda-build
          cd lambda-build
          cp ../lambda/*.js .
          cp ../lambda/package.json .
          cp -r ../lambda/shared .
          cp ../lambda/tests/manual/*.js .
          npm install --production
          zip -r ../lambda_functions.zip .
          cd ..
          rm -rf lambda-build

      - name: Upload Lambda package
        uses: actions/upload-artifact@v4
        with:
          name: lambda-package
          path: terraform/lambda_functions.zip

  # Job 4: Deploy to Test
  deploy-test:
    name: Deploy to Test
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/test' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/test')
    environment: test
    outputs:
      api_url: ${{ steps.test-outputs.outputs.api_url }}
      frontend_url: ${{ steps.test-outputs.outputs.frontend_url }}
      s3_bucket: ${{ steps.test-outputs.outputs.s3_bucket }}
      cloudfront_distribution: ${{ steps.test-outputs.outputs.cloudfront_distribution }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy to Test
        working-directory: ./terraform
        run: |
          terraform init
          terraform workspace select test || terraform workspace new test
          terraform plan -var="environment=test" -var="app_name=recordsw-app-test"
          terraform apply -var="environment=test" -var="app_name=recordsw-app-test" -auto-approve

      - name: Get test outputs
        id: test-outputs
        working-directory: ./terraform
        run: |
          echo "api_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "frontend_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-deps-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-deps-

      - name: Cache frontend build artifacts
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}-${{ hashFiles('frontend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-${{ github.sha }}-
            ${{ runner.os }}-frontend-build-

      - name: Setup Node.js for frontend build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build frontend with API URL
        working-directory: ./frontend
        run: |
          # Check if build artifacts already exist from cache
          if [ -d "dist" ] && [ "$(ls -A dist)" ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
            echo "‚úÖ Using cached build artifacts"
            echo "VITE_BACKEND_URL=${{ steps.test-outputs.outputs.api_url }}" > .env.production
          else
            echo "üîÑ Building frontend from scratch"
            npm ci
            echo "VITE_BACKEND_URL=${{ steps.test-outputs.outputs.api_url }}" > .env.production
            npm run build
          fi

      - name: Deploy frontend to test
        run: |
          aws s3 sync frontend/dist/ s3://${{ steps.test-outputs.outputs.s3_bucket }} --delete

      - name: Invalidate CloudFront
        run: |
          echo "üîÑ Starting CloudFront invalidation with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i/3: Creating CloudFront invalidation..."
            if aws cloudfront create-invalidation --distribution-id ${{ steps.test-outputs.outputs.cloudfront_distribution }} --paths "/*"; then
              echo "‚úÖ CloudFront invalidation successful on attempt $i"
              break
            else
              if [ $i -eq 3 ]; then
                echo "‚ö†Ô∏è  All 3 invalidation attempts failed, but continuing deployment..."
                echo "CloudFront cache will eventually expire naturally"
              else
                wait_time=$((2**i))
                echo "‚ùå Attempt $i failed, waiting ${wait_time} seconds before retry..."
                sleep $wait_time
              fi
            fi
          done

  # Job 5: Smoke Tests on Test
  smoke-tests-test:
    name: Smoke Tests - Test
    runs-on: ubuntu-latest
    needs: deploy-test
    if: github.ref == 'refs/heads/test' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/test')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install test dependencies
        working-directory: ./terraform/lambda
        run: npm ci

      - name: Wait for deployment to settle
        run: sleep 30

      - name: Run health check only
        working-directory: ./terraform/lambda
        env:
          API_BASE_URL: ${{ needs.deploy-test.outputs.api_url }}
        run: |
          echo "üè• Running health endpoint check only"
          curl -f "$API_BASE_URL/health" || exit 1
          echo "‚úÖ Health endpoint is responding"

  # Job 6: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main')
    environment: production
    outputs:
      api_url: ${{ steps.production-outputs.outputs.api_url }}
      frontend_url: ${{ steps.production-outputs.outputs.frontend_url }}
      s3_bucket: ${{ steps.production-outputs.outputs.s3_bucket }}
      cloudfront_distribution: ${{ steps.production-outputs.outputs.cloudfront_distribution }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Download Lambda package
        uses: actions/download-artifact@v4
        with:
          name: lambda-package
          path: terraform/

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Deploy to Production
        working-directory: ./terraform
        run: |
          terraform init
          terraform workspace select default
          terraform plan -var="environment=prod" -var="app_name=recordsw-app"
          terraform apply -var="environment=prod" -var="app_name=recordsw-app" -auto-approve

      - name: Get production outputs
        id: production-outputs
        working-directory: ./terraform
        run: |
          echo "api_url=$(terraform output -raw api_gateway_url)" >> $GITHUB_OUTPUT
          echo "frontend_url=$(terraform output -raw cloudfront_url)" >> $GITHUB_OUTPUT
          echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          key: ${{ runner.os }}-frontend-deps-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-deps-

      - name: Cache frontend build artifacts
        uses: actions/cache@v3
        with:
          path: frontend/dist
          key: ${{ runner.os }}-frontend-build-${{ github.sha }}-${{ hashFiles('frontend/src/**/*') }}
          restore-keys: |
            ${{ runner.os }}-frontend-build-${{ github.sha }}-
            ${{ runner.os }}-frontend-build-

      - name: Setup Node.js for frontend build
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build frontend with API URL
        working-directory: ./frontend
        run: |
          # Check if build artifacts already exist from cache
          if [ -d "dist" ] && [ "$(ls -A dist)" ] && [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
            echo "‚úÖ Using cached build artifacts"
            echo "VITE_BACKEND_URL=${{ steps.production-outputs.outputs.api_url }}" > .env.production
          else
            echo "üîÑ Building frontend from scratch"
            npm ci
            echo "VITE_BACKEND_URL=${{ steps.production-outputs.outputs.api_url }}" > .env.production
            npm run build
          fi

      - name: Deploy frontend to production
        run: |
          aws s3 sync frontend/dist/ s3://${{ steps.production-outputs.outputs.s3_bucket }} --delete

      - name: Invalidate CloudFront
        run: |
          echo "üîÑ Starting CloudFront invalidation with retry logic..."
          for i in {1..3}; do
            echo "Attempt $i/3: Creating CloudFront invalidation..."
            if aws cloudfront create-invalidation --distribution-id ${{ steps.production-outputs.outputs.cloudfront_distribution }} --paths "/*"; then
              echo "‚úÖ CloudFront invalidation successful on attempt $i"
              break
            else
              if [ $i -eq 3 ]; then
                echo "‚ö†Ô∏è  All 3 invalidation attempts failed, but continuing deployment..."
                echo "CloudFront cache will eventually expire naturally"
              else
                wait_time=$((2**i))
                echo "‚ùå Attempt $i failed, waiting ${wait_time} seconds before retry..."
                sleep $wait_time
              fi
            fi
          done

  # Job 7: Smoke Tests on Production - TEMPORARILY DISABLED
  # smoke-tests-production:
  #   name: Smoke Tests - Production
  #   runs-on: ubuntu-latest
  #   needs: deploy-production
  #   if: github.ref == 'refs/heads/main'
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: ${{ env.NODE_VERSION }}

  #     - name: Install test dependencies
  #       working-directory: ./terraform/lambda
  #       run: npm ci

  #     - name: Wait for deployment to settle
  #       run: sleep 30

  #     - name: Run smoke tests on production
  #       working-directory: ./terraform/lambda
  #       env:
  #         API_BASE_URL: ${{ needs.deploy-production.outputs.api_url }}
  #       run: |
  #         echo "‚ö†Ô∏è  Running minimal smoke tests (health endpoint only)"
  #         echo "Some tests are temporarily disabled due to API Gateway configuration issues"
  #         node tests/smoke/smoke-tests.js

  # Job 8: Notify on Success/Failure
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [smoke-tests-test]
    if: always()
    steps:
      - name: Notify on Success
        if: ${{ needs.smoke-tests-test.result == 'success' }}
        run: |
          echo "‚úÖ Deployment successful!"
          # Add Slack/Discord notification here if desired

      - name: Notify on Failure
        if: ${{ needs.smoke-tests-test.result == 'failure' }}
        run: |
          echo "‚ùå Deployment failed!"
          # Add Slack/Discord notification here if desired
